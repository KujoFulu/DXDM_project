)
fig_genotype
# Create a new data frame with the first five runs
data_five_runs <- data %>% slice(1:(5*generation_numbers))
data_five_runs <- subset(data_five_runs,select = c(Generations,AlleleFrequency))
# Add a new column "Runs" based on row index
data_five_runs <- data_five_runs %>%
mutate(Runs = rep(1:(n() %/% generation_numbers), each = generation_numbers, length.out = n()))
fig_5runs <- data_five_runs %>% accumulate_by(~Generations)
fig_5runs <- fig_5runs %>%
plot_ly(
x = ~Generations,
y = ~AlleleFrequency,
split = ~Runs,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F),
)
fig_5runs <- fig_5runs %>%
plot_ly(
x = ~Generations,
y = ~AlleleFrequency,
split = ~Runs,
frame = ~frame,
type = 'scatter',
mode = 'lines',
line = list(simplyfy = F)
)
fig_5runs <- fig_5runs %>% layout(
xaxis = list(
title = "Generations",
zeroline = F
),
yaxis = list(
title = "Allele Frequency of A",
zeroline = F
),
legend = list(
title = "Runs"  # Set the legend title for the entire legend box
)
)
fig_5runs <- fig_5runs %>% animation_opts(
frame = 100,
transition = 0,
redraw = FALSE
)
fig_5runs <- fig_5runs %>% animation_slider(
hide = T
)
fig_5runs <- fig_5runs %>% animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
fig_5runs
library(orca)
# Check if orca is installed, and install it if not
if(!require(orca,quietly = TRUE)){
install.packages("orca")
}
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(plotly)
library(tidyverse)
library(orca)
# Save the plot as a GIF file
orca(fig_5runs, file = "fig_5runs.gif", animation = "gif")
# Check if kaleido is installed, and install it if not
if(!require(kaleido,quietly = TRUE)){
install.packages("kaleido")
}
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(plotly)
library(tidyverse)
library(kaleido)
install.packages("kaleido")
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
install_github('andreacirilloac/updateR')
# Check if kaleido is installed, and install it if not
if(!require(kaleido,quietly = TRUE)){
install.packages("kaleido")
}
# Check if ggplot2 is installed, and install it if not
if (!require(ggplot2, quietly = TRUE)) {
install.packages("ggplot2")
}
# Check if ggpubr is installed, and install it if not
if (!require(ggpubr, quietly = TRUE)) {
install.packages("ggpubr")
}
# Check if dplyr is installed, and install it if not
if (!require(dplyr, quietly = TRUE)) {
install.packages("dplyr")
}
# Check if viridis is installed, and install it if not
if (!require(viridis, quietly = TRUE)) {
install.packages("viridis")
}
# Check if plotly is installed, and install it if not
if(!require(plotly,quietly = TRUE)){
install.packages("plotly")
}
# Check if tidyverse is installed, and install it if not
if(!require(tidyverse,quietly = TRUE)){
install.packages("tidyverse")
}
# Check if kaleido is installed, and install it if not
if(!require(kaleido,quietly = TRUE)){
install.packages("kaleido")
}
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(plotly)
library(tidyverse)
library(kaleido)
# Check if webshot is installed, and install it if not
if(!require(webshot,quietly = TRUE)){
install.packages("webshot")
}
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(plotly)
library(tidyverse)
library(webshot)
# Save the plot as a GIF file using webshot
webshot(fig_5runs, file = "fig_5runs.gif", delay = 500)
# Save the plot as an HTML file
htmlwidgets::saveWidget(fig_5runs, file = "fig_5runs.html")
for (i in 1:n_frames) {
frame_name <- sprintf("frame_%03d.png", i)
orca(fig_5runs, frame = i, file = frame_name)
}
install.packages("magick")
# Check if magick is installed, and install it if not
if(!require(magick,quietly = TRUE)){
install.packages("magick")
}
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(plotly)
library(tidyverse)
library(magick)
# Run simulation with go
# Get the current working directory
current_dir <- getwd()
# Save the plot as a GIF using magick
fig_5runs_gif <- image_graph(fig_5runs, format = "png", width = 800, height = 600)
fig_5runs_gif <- image_animate(fig_5runs_gif, fps = 10)
image_write(fig_5runs_gif, path = "fig_5runs.gif")
library(magick)
library(webshot)
library(htmlwidgets)
# Save the plot as HTML
htmlwidgets::saveWidget(fig_5runs, file = "fig_5runs.html")
fig_genotype
fig_genotype
# Create a new data frame with the first five runs
data_five_runs <- data %>% slice(1:(5*generation_numbers))
data_five_runs <- subset(data_five_runs,select = c(Generations,AlleleFrequency))
# Add a new column "Runs" based on row index
data_five_runs <- data_five_runs %>%
mutate(Runs = rep(1:(n() %/% generation_numbers), each = generation_numbers, length.out = n()))
source("~/go/src/WrightFisher/WrightFisher.R")
fig_genotype
fig_genotype
fig_5runs
# Save the plot as an HTML file
htmlwidgets::saveWidget(fig_5runs, file = "fig_5runs.html")
# Create a new data frame with the first five runs
data_five_runs <- data %>% slice(1:(5*generation_numbers))
source("~/go/src/WrightFisher/WrightFisher.R")
source("~/go/src/WrightFisher/WrightFisher.R", echo=TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# Check if ggplot2 is installed, and install it if not
if (!require(ggplot2, quietly = TRUE)) {
install.packages("ggplot2")
}
# Check if ggpubr is installed, and install it if not
if (!require(ggpubr, quietly = TRUE)) {
install.packages("ggpubr")
}
# Check if dplyr is installed, and install it if not
if (!require(dplyr, quietly = TRUE)) {
install.packages("dplyr")
}
# Check if viridis is installed, and install it if not
if (!require(viridis, quietly = TRUE)) {
install.packages("viridis")
}
# Check if plotly is installed, and install it if not
if(!require(plotly,quietly = TRUE)){
install.packages("plotly")
}
# Check if tidyverse is installed, and install it if not
if(!require(tidyverse,quietly = TRUE)){
install.packages("tidyverse")
}
# Check if htmlwidgets is installed, and install it if not
if(!require(htmlwidgets,quietly = TRUE)){
install.packages("htmlwidgets")
}
# Check if shiny is installed, and install it if not
if(!require(shiny,quietly = TRUE)){
install.packages("shiny")
}
# Check if shinyjs is installed, and install it if not
if(!require(shinyjs,quietly = TRUE)){
install.packages("shinyjs")
}
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(plotly)
library(tidyverse)
library(htmlwidgets)
library(shiny)
library(shinyjs)
# function for animation
# https://plotly.com/r/cumulative-animations/
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
runApp()
runApp()
runApp()
runApp()
View(fixation_count_df)
View(fixation_count_df)
View(fixation_data)
View(fixation_count_df)
# Check if ggplot2 is installed, and install it if not
if (!require(ggplot2, quietly = TRUE)) {
install.packages("ggplot2")
}
# Check if ggpubr is installed, and install it if not
if (!require(ggpubr, quietly = TRUE)) {
install.packages("ggpubr")
}
# Check if dplyr is installed, and install it if not
if (!require(dplyr, quietly = TRUE)) {
install.packages("dplyr")
}
# Check if viridis is installed, and install it if not
if (!require(viridis, quietly = TRUE)) {
install.packages("viridis")
}
# Check if plotly is installed, and install it if not
if(!require(plotly,quietly = TRUE)){
install.packages("plotly")
}
# Check if tidyverse is installed, and install it if not
if(!require(tidyverse,quietly = TRUE)){
install.packages("tidyverse")
}
# Check if htmlwidgets is installed, and install it if not
if(!require(htmlwidgets,quietly = TRUE)){
install.packages("htmlwidgets")
}
# Check if shiny is installed, and install it if not
if(!require(shiny,quietly = TRUE)){
install.packages("shiny")
}
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(plotly)
library(tidyverse)
library(htmlwidgets)
library(shiny)
# https://plotly.com/r/cumulative-animations/
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
# Get path
path <- getwd()
setwd(path)
# Read csv file
parameter <- read.csv('SimulationParameters.csv')
data <- read.csv('all_simulation_data.csv')
# Get the parameters
population_size <- parameter$PopulationSize
selection_coefficient <- parameter$SelectionCoefficient
start_fequency <- parameter$StartAlleleFrequency
generation_numbers <-parameter$NumGenerations
run_times <- parameter$NumberRuns
# Create a subset with average values for all generations
average_data <- data %>%
group_by(Generations) %>%
summarise(
PopulationSize = mean(PopulationSize),
SelectionCoefficient = mean(SelectionCoefficient),
StartAlleleFrequency = mean(StartAlleleFrequency),
Average_Num_Alleles = mean(NumAlleles),
Average_Allele_Frequency = mean(AlleleFrequency)
)
# Create a line plot
lineplotA <- ggplot(average_data, aes(x = Generations, y = Average_Allele_Frequency)) +
geom_line() +
labs(x = "Generations", y = "Frequency of Allele A") +
ggtitle("Average Allele A Frequency Plot")+
theme(plot.title = element_text(hjust = 0.5))
# Create a line plot
lineplota <- ggplot(average_data, aes(x = Generations, y = 1-Average_Allele_Frequency)) +
geom_line() +
labs(x = "Generations", y = "Frequency of Allele a") +
ggtitle("Average Allele a Frequency Plot")+
theme(plot.title = element_text(hjust = 0.5))
# make the Average allele plot that combined allele A and a
average_allele_freq_plot <- ggarrange(lineplotA, lineplota,
ncol = 1, nrow = 2)
# Display the plot
print(average_allele_freq_plot)
# Save the plot as a png file
ggsave(file = "Average Allele Frequency lineplot.png", plot = average_allele_freq_plot)
# Calculate the frequency of AA, Aa, and aa in the last generation
last_generation <- max(average_data$Generations)
last_generation_data <- subset(average_data, Generations == last_generation)
last_generation_data$AA_Frequency <- (last_generation_data$Average_Allele_Frequency)**2
last_generation_data$Aa_Frequency <- 2*last_generation_data$Average_Allele_Frequency * (1 - last_generation_data$Average_Allele_Frequency)
last_generation_data$aa_Frequency <- (1 - last_generation_data$Average_Allele_Frequency)**2
# Create a data frame for the bar plot
genotype_data <- data.frame(
Genotype = c("AA", "Aa", "aa"),
Frequency = c(last_generation_data$AA_Frequency,last_generation_data$Aa_Frequency,last_generation_data$aa_Frequency)
)
# Plot Genotype frequenct
# Create a bar plot
genotype_frequency_plot <- ggplot(genotype_data, aes(x = Genotype, y = Frequency)) +
geom_bar(stat = "identity", fill = "skyblue") +
ggtitle("Individual Genotype Frequency Plot of AA, Aa, and aa")+
labs(x = "Genotype of Individuals",
y = "Genotype Frequency") +
theme_minimal()
# display the plot
genotype_frequency_plot
# Save the plot as a png file
ggsave(file = "Genotype Frequency Plot.png", plot = genotype_frequency_plot)
# Set the plot title
title_total <- paste("Distribution of Total Allele Copies Across Genration S(n) for s=", toString(selection_coefficient), sep = "")
# Create a ggplot object
p <- ggplot(data, aes(x = NumAlleles)) +
geom_histogram(binwidth = 1, fill = rgb(0.2, 0.5, 0.2, 0.7), color = rgb(0.1, 0.3, 0.1, 0.7)) +
labs(title = title_total,
x = "Allele Count (n)",
y = "Frequency")
# Save the plot to a png file
png_file_path <- "TotalAlleleCopiesHistogram_ggplot.png"
ggsave(png_file_path, p)
# Display the plot
print(p)
# Create a data frame for fixation events
fixation_data <- subset(data, AlleleFrequency >= 1)
# Create a data frame for loss events
loss_data <- subset(data, AlleleFrequency <= 0)
# Count the number of fixation events per generation
fixation_count <- table(fixation_data$Generations)
# Count the number of loss events per generation
loss_count <- table(loss_data$Generations)
# Create a data frame for fixation count
fixation_count_df <- data.frame(Generations = as.numeric(names(fixation_count)), Count = as.numeric(fixation_count))
# Create a data frame for loss count
loss_count_df <- data.frame(Generations = as.numeric(names(loss_count)), Count = as.numeric(loss_count))
# Create a bar plot for fixation events
fixation_bar_plot <- ggplot(fixation_count_df, aes(x = Generations, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_smooth(method = "loess", se = FALSE, color = "black", linetype = "dotted") +
labs(title = "Fixation Events Over Time",
x = "Generations",
y = "Count of Fixation Events")+
ylim(0, max(loss_count_df$Count) * 1.5)
# Create a bar plot for loss events
loss_bar_plot <- ggplot(loss_count_df, aes(x = Generations, y = Count)) +
geom_bar(stat = "identity", fill = "coral") +
geom_smooth(method = "loess", se = FALSE, color = "black", linetype = "dotted") +
labs(title = "Loss Events Over Time",
x = "Generations",
y = "Count of Loss Events")+
ylim(0, max(loss_count_df$Count) * 1.5)
# Create a bar plot for fixation events
fixation_bar_plot <- ggplot(fixation_count_df, aes(x = Generations, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_smooth(method = "loess", se = FALSE, color = "black", linetype = "dotted") +
labs(title = "Fixation Events Over Time",
x = "Generations",
y = "Count of Fixation Events")+
ylim(0, max(loss_count_df$Count, na.rm = TRUE) * 1.5)
View(loss_count_df)
View(fixation_count_df)
# Create a bar plot for fixation events
fixation_bar_plot <- ggplot(fixation_count_df, aes(x = Generations, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_smooth(method = "loess", se = FALSE, color = "black", linetype = "dotted") +
labs(title = "Fixation Events Over Time",
x = "Generations",
y = "Count of Fixation Events")+
ylim(0, max(loss_count_df$Count) * 1.5)
shiny::runApp()
# Check if ggplot2 is installed, and install it if not
if (!require(ggplot2, quietly = TRUE)) {
install.packages("ggplot2")
}
# Check if ggpubr is installed, and install it if not
if (!require(ggpubr, quietly = TRUE)) {
install.packages("ggpubr")
}
# Check if dplyr is installed, and install it if not
if (!require(dplyr, quietly = TRUE)) {
install.packages("dplyr")
}
# Check if viridis is installed, and install it if not
if (!require(viridis, quietly = TRUE)) {
install.packages("viridis")
}
# Check if plotly is installed, and install it if not
if(!require(plotly,quietly = TRUE)){
install.packages("plotly")
}
# Check if tidyverse is installed, and install it if not
if(!require(tidyverse,quietly = TRUE)){
install.packages("tidyverse")
}
# Check if htmlwidgets is installed, and install it if not
if(!require(htmlwidgets,quietly = TRUE)){
install.packages("htmlwidgets")
}
# Check if shiny is installed, and install it if not
if(!require(shiny,quietly = TRUE)){
install.packages("shiny")
}
# Check if shinyjs is installed, and install it if not
if(!require(shinyjs,quietly = TRUE)){
install.packages("shinyjs")
}
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(plotly)
library(tidyverse)
library(htmlwidgets)
library(shiny)
library(shinyjs)
runApp()
runApp()
# Create a bar plot for fixation events
fixation_bar_plot <- ggplot(fixation_count_df, aes(x = Generations, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_smooth(method = "loess", se = FALSE, color = "black", linetype = "dotted") +
labs(title = "Fixation Events Over Time",
x = "Generations",
y = "Count of Fixation Events")+
ylim(0, max(fixation_count_df$Count) * 1.5, ylim = c(0, max(max(fixation_count_df$Count), max(loss_count_df$Count)) * 1.5))
# Create a bar plot for fixation events
fixation_bar_plot <- ggplot(fixation_count_df, aes(x = Generations, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_smooth(method = "loess", se = FALSE, color = "black", linetype = "dotted") +
labs(title = "Fixation Events Over Time",
x = "Generations",
y = "Count of Fixation Events")+
ylim(0, max(fixation_count_df$Count) * 1.5)
# Create a bar plot for loss events
loss_bar_plot <- ggplot(loss_count_df, aes(x = Generations, y = Count)) +
geom_bar(stat = "identity", fill = "coral") +
geom_smooth(method = "loess", se = FALSE, color = "black", linetype = "dotted") +
labs(title = "Loss Events Over Time",
x = "Generations",
y = "Count of Loss Events")+
ylim(0, max(loss_count_df$Count) * 1.5)
# make Fixation and loss bar plots that conbain fix and loss plot
fix_loss_bar_polt <- ggarrange(fixation_bar_plot, loss_bar_plot,
ncol = 2, nrow = 1, ylim = c(0, max(max(fixation_count_df$Count), max(loss_count_df$Count)) * 1.5))
print(fix_loss_bar_polt)
# make Fixation and loss bar plots that conbain fix and loss plot
fix_loss_bar_polt <- ggarrange(fixation_bar_plot, loss_bar_plot,
ncol = 2, nrow = 1)
print(fix_loss_bar_polt)
