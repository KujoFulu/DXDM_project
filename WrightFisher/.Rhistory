# Check if ggplot2 is installed, and install it if not
if (!require(ggplot2, quietly = TRUE)) {
install.packages("ggplot2")
}
source("~/go/src/final_project/WrightFisher/WrightFisher.R")
source("~/go/src/WrightFisherSimulation/WrightFisher/WrightFisher.R")
source("~/go/src/WrightFisherSimulation/WrightFisher/WrightFisher.R")
data <- read.csv('all_simulation_data.csv')
# Check if ggplot2 is installed, and install it if not
if (!require(ggplot2, quietly = TRUE)) {
install.packages("ggplot2")
}
# Check if ggpubr is installed, and install it if not
if (!require(ggpubr, quietly = TRUE)) {
install.packages("ggpubr")
}
# Check if dplyr is installed, and install it if not
if (!require(dplyr, quietly = TRUE)) {
install.packages("dplyr")
}
# Check if viridis is installed, and install it if not
if (!require(viridis, quietly = TRUE)) {
install.packages("viridis")
}
# Load required libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
# Get the current working directory
current_dir <- getwd()
# Construct the absolute path to the Go program
go_program_path <- file.path(current_dir, "WrightFisherSimulation")
# Run the Go program from R
system(paste("go run", shQuote(go_program_path)), intern = TRUE)
# Get path
path <- getwd()
setwd(path)
# Read csv file
parameter <- read.csv('SimulationParameters.csv')
data <- read.csv('all_simulation_data.csv')
# Get the parameters
population_size <- parameter$PopulationSize
selection_coefficient <- parameter$SelectionCoefficient
start_fequency <- parameter$StartAlleleFrequency
generation_numbers <-parameter$NumGenerations
run_times <- parameter$NumberRuns
# Create a subset with average values for all generations
average_data <- data %>%
group_by(Generations) %>%
summarise(
PopulationSize = mean(PopulationSize),
SelectionCoefficient = mean(SelectionCoefficient),
StartAlleleFrequency = mean(StartAlleleFrequency),
Average_Num_Alleles = mean(NumAlleles),
Average_Allele_Frequency = mean(AlleleFrequency)
)
# Create a line plot
lineplotA <- ggplot(average_data, aes(x = Generations, y = Average_Allele_Frequency)) +
geom_line() +
labs(x = "Generations", y = "Frequency of Allele A") +
ggtitle("Average Allele A Frequency Plot")+
theme(plot.title = element_text(hjust = 0.5))
# Create a line plot
lineplota <- ggplot(average_data, aes(x = Generations, y = 1-Average_Allele_Frequency)) +
geom_line() +
labs(x = "Generations", y = "Frequency of Allele a") +
ggtitle("Average Allele a Frequency Plot")+
theme(plot.title = element_text(hjust = 0.5))
# make the Average allele plot that combined allele A and a
average_allele_freq_plot <- ggarrange(lineplotA, lineplota,
ncol = 1, nrow = 2)
# Display the plot
print(average_allele_freq_plot)
# Save the plot as a png file
ggsave(file = "Average Allele Frequency lineplot.png", plot = average_allele_freq_plot)
# Calculate the frequency of AA, Aa, and aa in the last generation
last_generation <- max(data$Generations)
last_generation_data <- subset(data, Generations == last_generation)
last_generation_data$AA_Frequency <- (last_generation_data$AlleleFrequency)**2 * last_generation_data$PopulationSize
last_generation_data$Aa_Frequency <- last_generation_data$AlleleFrequency * (1 - last_generation_data$AlleleFrequency) * last_generation_data$PopulationSize
last_generation_data$aa_Frequency <- (1 - last_generation_data$AlleleFrequency)**2 * last_generation_data$PopulationSize
# Create a data frame for the bar plot
genotype_data <- data.frame(
Genotype = c("AA", "Aa", "aa"),
Frequency = c(
sum(last_generation_data$AA_Frequency),
sum(last_generation_data$Aa_Frequency),
sum(last_generation_data$aa_Frequency)
)
)
# Plot Genotype counts
# Create a bar plot
genotype_count_plot <- ggplot(genotype_data, aes(x = Genotype, y = Frequency)) +
geom_bar(stat = "identity", fill = "skyblue") +
ggtitle("Individual Genotype Count Plot")+
labs(x = "Genotype of Individuals",
y = "Number of Individuals in Population") +
theme_minimal()
# display the plot
genotype_count_plot
# Save the plot as a png file
ggsave(file = "Genotype counts plot.png", plot = genotype_count_plot)
# Set the plot title
title_total <- paste("Distribution of Total Allele Copies Across Genration S(n) for s=", toString(selection_coefficient), sep = "")
# Create a ggplot object
p <- ggplot(data, aes(x = NumAlleles)) +
geom_histogram(binwidth = 1, fill = rgb(0.2, 0.5, 0.2, 0.7), color = rgb(0.1, 0.3, 0.1, 0.7)) +
labs(title = title_total,
x = "Allele Count (n)",
y = "Frequency")
# Save the plot to a PDF file
png_file_path <- "TotalAlleleCopiesHistogram_ggplot.png"
ggsave(png_file_path, p)
# Display the plot
print(p)
# Create a data frame for fixation events
fixation_data <- subset(data, AlleleFrequency == 1)
# Create a data frame for loss events
loss_data <- subset(data, AlleleFrequency == 0)
# Count the number of fixation events per generation
fixation_count <- table(fixation_data$Generations)
# Count the number of loss events per generation
loss_count <- table(loss_data$Generations)
# Create a data frame for fixation count
fixation_count_df <- data.frame(Generations = as.numeric(names(fixation_count)), Count = as.numeric(fixation_count))
# Create a data frame for loss count
loss_count_df <- data.frame(Generations = as.numeric(names(loss_count)), Count = as.numeric(loss_count))
# Create a bar plot for fixation events
fixation_bar_plot <- ggplot(fixation_count_df, aes(x = Generations, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_smooth(method = "loess", se = FALSE, color = "black", linetype = "dotted") +
labs(title = "Fixation Events Over Time",
x = "Generations",
y = "Count of Fixation Events")+
ylim(0, max(loss_count_df$Count) * 1.5)
# Create a bar plot for loss events
loss_bar_plot <- ggplot(loss_count_df, aes(x = Generations, y = Count)) +
geom_bar(stat = "identity", fill = "coral") +
geom_smooth(method = "loess", se = FALSE, color = "black", linetype = "dotted") +
labs(title = "Loss Events Over Time",
x = "Generations",
y = "Count of Loss Events")+
ylim(0, max(loss_count_df$Count) * 1.5)
# make Fixation and loss bar plots that conbain fix and loss plot
fix_loss_bar_polt <- ggarrange(fixation_bar_plot, loss_bar_plot,
ncol = 2, nrow = 1)
print(fix_loss_bar_polt)
# Save the plot as a png file
ggsave(file = "Fixation and loss bar plots.png", plot = fix_loss_bar_polt)
# Count the maximum allele number reached for each simulation
max_allele_counts <- tapply(data$NumAlleles, data$Generations, max)
# Create a data frame for maximum allele counts
max_allele_df <- data.frame(Generations = as.numeric(names(max_allele_counts)), MaxAllele = as.numeric(max_allele_counts))
# Create a histogram for the distribution of maximum allele number reached
max_allele_plot <- ggplot(max_allele_df, aes(x = MaxAllele)) +
geom_histogram(binwidth = 1, fill = "darkgreen", color = "black", alpha = 0.7) +
labs(title = paste("Distribution of Maximum Allele Number Reached (Mi) for s=",toString(selection_coefficient), sep = ""),
x = "Maximum Allele Number (Mi)",
y = "Number of Simulations") +
theme_minimal()
# Save the plot as a png file
ggsave(file = "Max Allele Histogram.png", plot = max_allele_plot)
# Display the plot
print(max_allele_plot)
# Create a combined plot with density on top and heatmap at the bottom
combined_plot <- ggplot(data, aes(x = Generations, y = NumAlleles)) +
geom_tile(aes(fill = NumAlleles), alpha = 0.7) +  # Heatmap at the bottom
geom_density_2d(aes(fill = after_stat(level)), contour = FALSE) +  # Density plot on top
scale_fill_viridis(name = "NumAlleles", guide = "legend") +  # Adjust the color scale as needed
labs(title = paste("Combined Plot for", run_times, "Simulations (s =", selection_coefficient, ")"),
x = "Time (Generations)",
y = "Allele Count",
fill = "") +  # Remove legend title
theme_minimal()
# Save the combined plot as a png file
ggsave(file = "Combined_Plot.png", plot = combined_plot)
# Display the combined plot
print(combined_plot)
merged_df <- subset(average_data, select = c(Generations, Average_Num_Alleles, Average_Allele_Frequency))
merged_df <- merged_df %>%
full_join(fixation_count_df, by = 'Generations') %>%
full_join(loss_count_df, by = 'Generations') %>%
mutate(FixedNumber = Count.x, LossedNumber = Count.y) %>%
select(-Count.x, -Count.y)
merged_df$Fix_loss_ratio = merged_df$FixedNumber/merged_df$LossedNumber
# Alelle fixed and lossed ratio change Plot
lineplot_flratio <- ggplot(merged_df, aes(x = Generations, y = Fix_loss_ratio)) +
geom_line() +
labs(x = "Generations", y = "The Ration of Alelle fixed and lossed") +
ggtitle("Alelle fixed and lossed ratio Plot")+
theme(plot.title = element_text(hjust = 0.5))
lineplot_flratio
# Save the plot as a png file
ggsave(file = "Alelle fixed and lossed ratio Plot.png", plot = lineplot_flratio)
