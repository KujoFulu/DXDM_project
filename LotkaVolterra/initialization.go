package main

import (
	"math/rand"
	"time"

	"gonum.org/v1/gonum/mat"
)

// InitializeEcosystem() takes:
// data from user input: numSpecies int; growthRate float64 – for grass, the only prey in the ecosystem; deathRate []float64 – for all other species.
// It initializes the ecosystem object with a certain number of species, and returns an Ecosystem object.
// interaction matrix and deathGrowth matrix are generated by two help functions.
func InitializeEcosystem(numSpecies int, interaction mat.Matrix, deathGrowth mat.Vector) *Ecosystem {
	// initialize an Ecosystem object and a species slice
	var ecosystem *Ecosystem
	species := make([]*Specie, numSpecies)

	// assign attributes values
	ecosystem.interaction = interaction
	ecosystem.deathGrowth = deathGrowth
	ecosystem.species = species

	// set the index for each specie, starting from 0
	index := 0

	// range through species slice in ecosystem, adding attributes to each specie
	// default set ecosystem.species[0] as grass – prey; all other species are predator
	for _, specie := range species {

		specie.population = 100 // we can reset this value
		specie.index = index
		ecosystem.species = append(ecosystem.species, specie)

		// increase index by one for each specie
		index++
	}

	return ecosystem
}

func InitializePop(species []*Specie) mat.Matrix {
	// get the length of the species slice
	numSpecies := len(species)

	// range through the species slice, and extract them all into a slice
	pop := make([]float64, numSpecies)
	for _, specie := range species {
		pop[specie.index] = specie.population
	}

	// convert the slice into a matrix
	popMatrix := mat.NewDense(numSpecies, 1, pop)

	return popMatrix
}

// ecosystem.deathGrowth = IniRateMatrix(deathGrowth)
// IniInterMatrix() takes a slice of float64 objects, and returns a mat.Matrix object.
func IniRateMatrix(species []*Specie) mat.Matrix {
	// get the number of species
	n := len(species)

	// randomly generate a slice of float64 numbers
	deathGrowth := generateDeathGrowthSlice(n)

	// convert the slice into a n*1 death and growth matrix
	rateMatrix := mat.NewDense(n, 1, deathGrowth)

	return rateMatrix
}

// generateDeathGrowthSlice generates a slice of float64 numbers with the first number in the range (0, 1)
// and the others in the range (-1, 0)
func generateDeathGrowthSlice(n int) []float64 {
	deathGrowth := make([]float64, n)

	// Seed the random number generator
	rand.Seed(time.Now().UnixNano())

	// Set the first element to a random number in (0, 1)
	deathGrowth[0] = rand.Float64()

	// Set the remaining elements to random numbers in (-1, 0)
	for i := 1; i < n; i++ {
		deathGrowth[i] = rand.Float64() - 1.0 // This generates a number in [0, 1) and then subtracts 1 to shift to [-1, 0)
	}

	return deathGrowth
}
